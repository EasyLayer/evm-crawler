name: 'Create & Publish Prerelease'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type to bump (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      suffix:
        description: 'Version suffix for prerelease (e.g., alpha, beta)'
        required: true
        default: 'alpha'

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/development'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies in current repository
        uses: ./.github/actions/yarn-nm-install
      
      - name: Run Prerelease Publish Packages Script
        id: publish_prerelease
        run: |
          echo "Creating prerelease with version type: ${{ github.event.inputs.version }}"
          echo "Using suffix: ${{ github.event.inputs.suffix }}"
          bash ./scripts/create-and-publish-prerelease.sh
        env:
          SUFFIX: ${{ github.event.inputs.suffix }}
          VERSION: ${{ github.event.inputs.version }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUSKY: '0'  # Disable HUSKY hooks during CI
      
      - name: Get Bumped Version from lerna.json
        id: get_bumped
        run: |
          VERSION=$(jq -r '.version' lerna.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Bumped version: $VERSION"
      
      - name: Create Git Tag if not exists
        run: |
          TAG="v${{ env.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            echo "Creating a new tag $TAG."
            git tag "$TAG"
            git push origin "$TAG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate Release Notes from CHANGELOG.md
        id: notes
        run: |
          VERSION="${{ env.VERSION }}"
          echo "Looking for changelog section for prerelease version: $VERSION"
          
          # Check for different header formats in CHANGELOG.md
          # For patch prereleases: ## <small>0.6.21-alpha.1 (2025-06-15)</small>
          # For minor/major prereleases: ## 0.7.0-alpha.1 (2025-06-15)
          if grep -q "^## <small>${VERSION} " CHANGELOG.md; then
            echo "Found prerelease patch version format with <small> tags"
            TAG_HEADER="## <small>${VERSION} "
            END_PATTERN="^## <small>"
          elif grep -q "^## ${VERSION} " CHANGELOG.md; then
            echo "Found prerelease minor/major version format without <small> tags"
            TAG_HEADER="## ${VERSION} "
            END_PATTERN="^## "
          else
            echo "⚠️  Could not find changelog section for prerelease version ${VERSION}"
            TAG_HEADER=""
            END_PATTERN=""
          fi
          
          # Extract release notes between current version header and next version header
          if [ -n "$TAG_HEADER" ]; then
            NOTES=$(sed -n "/^${TAG_HEADER}/,/${END_PATTERN}/p" CHANGELOG.md \
              | sed '1d;$d' \
              | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          else
            NOTES=""
          fi
          
          # If it's empty, it's not an error, but a default.
          if [ -z "$NOTES" ]; then
            echo "⚠️  No prerelease notes found for $VERSION; proceeding with default body."
            NOTES="(no changelog for this prerelease)"
          else
            echo "✅ Successfully extracted prerelease notes"
            echo "Release notes preview:"
            echo "$NOTES" | head -3
          fi
          
          # Set output for next step
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES"    >> $GITHUB_OUTPUT
          echo "EOF"       >> $GITHUB_OUTPUT

      
      - name: Create GitHub Prerelease
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "v${{ env.VERSION }} (Prerelease)"
          draft: false
          prerelease: true
          body: ${{ steps.notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}